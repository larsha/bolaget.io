apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  revisionHistoryLimit: 2
  replicas: {{ .Values.nginx.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app: nginx-deployment
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        checksum/nginx-config: {{ include (print $.Template.BasePath "/nginx-configmap.yaml") . | sha256sum }}
      labels:
        app: nginx-deployment
    spec:
      volumes:
        - name: nginx-volume
          configMap:
            name: nginx-configmap
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - nginx-deployment
                topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 20
      containers:
      - name: nginx
        image: "{{ .Values.nginx.image.repository }}:{{ .Values.nginx.image.tag }}"
        volumeMounts:
          - name: nginx-volume
            mountPath: /etc/nginx
            readOnly: true
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "10"]
        imagePullPolicy: Always
        resources:
          limits:
            memory: "100Mi"
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          periodSeconds: 1
          successThreshold: 1
          failureThreshold: 1
        livenessProbe:
          httpGet:
            path: /ready
            port: 80
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 1
